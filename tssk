// pages/api/postdelay.ts

import { NextApiRequest, NextApiResponse } from 'next';

export default async (req: NextApiRequest, res: NextApiResponse) => {
  try {
    // Simulating a long process
    const simulateLongProcess = async () => {
      return new Promise<void>((resolve) => {
        let progress = 0;
        const interval = setInterval(() => {
          progress += 10;
          res.json({ progress });
          if (progress >= 100) {
            clearInterval(interval);
            resolve(); // Resolving without arguments
          }
        }, 3000);
      });
    };

    await simulateLongProcess();
  } catch (error) {
    res.status(500).json({ error: 'An error occurred' });
  }
};


    // Simulate a time-consuming process
    for (let i = 0; i <= 100; i += 10) {
        await delay(1000); // Wait for 10 seconds
        res.status(200).json({ progress: `${i}%` });
      }

const delay = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));
